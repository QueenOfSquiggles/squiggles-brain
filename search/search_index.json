{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Squiggles Brain","text":"<p>A wildly mismanaged knowledge base</p> <p>Welcome and enjoy! I'm still getting things set up initially and like 99% of this is gonna be garbage at first!</p>"},{"location":"about/","title":"Hello there!","text":"<p>This is Queen Of Squiggles's Knowledge Base Wiki! The primary goal of this wiki is to document things I've learned that might be useful to be in a searchable wiki on the web. If you find this wiki useful, that's awesome! If you wanna contribute, check out the repo!</p>"},{"location":"godot/","title":"Godot Knowledge Base","text":"<p>This category is for any knowledge base articles related to the free and open source game engine, Godot</p> <p>For articles specific to the <code>godot-rust</code> GDExtension tool, refer to Godot Rust</p>"},{"location":"godot/godot-rust/","title":"Godot Rust Knowledge Base","text":"<p>Godot Rust is a tool system which allows you to create GDExtension libraries for Godot through rather clever FFI interactions using rust. It's a wonderful world where memory is managed and macros are king!</p> <p>Godot Rust Github (Godot 4)</p> <p>While there is a version available for Godot 3.X versions, I (QueenOfSquiggles) highly favor the Godot 4 versions. Especially 4.2 since <code>reloadable = true</code> is available to hot reload extensions currently in development</p>"},{"location":"godot/godot-rust/accessing-editor-interface/","title":"Accessing the Editor Interface","text":"<p>If done incorrectly, this will lead to a segmentation fault with no way to debug without more advanced debugging tools. What is crucial is to ensure your <code>EditorPlugin</code> class is the only class using <code>EditorInterface</code> and that it is configured for Godot-Rust to recognize it as an editor plugin!</p>"},{"location":"godot/godot-rust/accessing-editor-interface/#full-example","title":"Full Example","text":"<pre><code>#[derive(GodotClass)]\n#[class(tool, editor_plugin, base=EditorPlugin)]\nstruct MyEditorPlugin {\n    #[base]\n    base: Base&lt;EditorPlugin&gt;,\n}\n\n\n#[godot_api]\nimpl IEditorPlugin for MyEditorPlugin {\n    fn enter_tree(&amp;mut self) {\n        let Some(editor) = self.base.get_editor_interface() else {\n            return;\n        };\n        // then we can use \"editor\" to mess with the editor interface \n    }\n\n    fn exit_tree(&amp;mut self) {}\n}\n</code></pre> <p>Crucially, the <code>editor_plugin</code> part of the class definition is what determines to godot-rust that this class is editor-only. This will prevent the errors where EditorInterface is not available.</p>"},{"location":"godot/godot-rust/accessing-editor-interface/#functionality","title":"Functionality","text":"<p>This procudure creates essentially a plugin like you could create with GDScript. All of that same functionality is exposed through <code>self.base</code>. However, given that this is compiled at a lower level, you can also hook into other engine features that are less accesible to GDScript. Additionally, this method does not allow disabling the plugin because the entire GDExtension is either successfully loaded or it isn't!</p>"}]}